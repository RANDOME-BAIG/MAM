use alloc::boxed::Box;
use alloc::string::String;
use alloc::vec::Vec;
use core::ptr;

use iota_curl_cpu::*;
use iota_mam;
use iota_trytes::*;

use shared::ctrits::*;

#[repr(C)]
pub struct ParseResult {
    error: iota_mam::MamError,
    message: *mut CTrits,
    next: *mut CTrits,
}

#[no_mangle]
pub fn iota_mam_id(key: &CTrits, root: &CTrits) -> *const CTrits {
    let mut c1 = CpuCurl::<Trit>::default();
    let mut out: [Trit; HASH_LENGTH] = [0; HASH_LENGTH];
    iota_mam::id(
        ctrits_slice_trits(key),
        ctrits_slice_trits(root),
        &mut out,
        &mut c1,
    );
    Box::into_raw(Box::new(ctrits_from_trits(out.to_vec())))
}

#[no_mangle]
pub fn iota_mam_create(
    seed: &CTrits,
    message: &CTrits,
    key: &CTrits,
    root: &CTrits,
    siblings: &CTrits,
    next_root: &CTrits,
    start: isize,
    index: usize,
    security: u8,
) -> *const CTrits {
    let mut c1 = CpuCurl::<Trit>::default();
    let mut c2 = CpuCurl::<Trit>::default();
    let mut b1 = CpuCurl::<BCTrit>::default();

    let message_trits = ctrits_slice_trits(message);
    let siblings_trits = ctrits_slice_trits(siblings);
    let mut out: Vec<Trit> = vec![
        0;
        num::round_third(iota_mam::min_length(
            message_trits.len(),
            siblings_trits.len(),
            index,
            security as usize,
        ) as i64) as usize
    ];
    iota_mam::create::<CpuCurl<Trit>, CpuCurl<BCTrit>, CpuHam>(
        ctrits_slice_trits(seed),
        message_trits,
        ctrits_slice_trits(key),
        ctrits_slice_trits(root),
        siblings_trits,
        ctrits_slice_trits(next_root),
        start,
        index,
        security,
        &mut out,
        &mut c1,
        &mut c2,
        &mut b1,
    );

    Box::into_raw(Box::new(ctrits_from_trits(out)))
}

#[no_mangle]
pub fn iota_mam_parse(payload: &mut CTrits, side_key: &CTrits, root: &CTrits) -> *mut ParseResult {
    let mut c1 = CpuCurl::<Trit>::default();
    let mut payload_trits = ctrits_slice_trits_mut(payload);
    let result = iota_mam::parse(
        &mut payload_trits,
        ctrits_slice_trits(side_key),
        ctrits_slice_trits(root),
        &mut c1,
    );

    match result {
        Err(e) => Box::into_raw(Box::new(ParseResult {
            error: e,
            message: ptr::null_mut(),
            next: ptr::null_mut(),
        })),
        Ok((start, end)) => {
            let message = Box::new(ctrits_from_trits(
                payload_trits[start + HASH_LENGTH..end].to_vec(),
            ));
            let next = Box::new(ctrits_from_trits(
                payload_trits[start..start + HASH_LENGTH].to_vec(),
            ));
            Box::into_raw(Box::new(ParseResult {
                error: iota_mam::MamError::None,
                message: Box::into_raw(message),
                next: Box::into_raw(next),
            }))
        }
    }
}

#[test]
pub fn it_fails() {
    let payload = String::from(
        "AQ9ALYLWJC9MZEYSSLMFFRGSVDQXVEIIZZYWRNRUQCBICTJDVSTNRTIZ9ZRUNE9HOPCYE9VPGDPFHVFBJ\
         NAZPIHBVHKGBBYEHKAMXMOFTXAJXNEX9FXLDQMGVPT9RVMTFYIZVMCPLNUHERAUDUQTCVFOCSULDYLNWU\
         XARSLKUENEU9TXUQROEVZRCN9EXQKORUQJUOOPURKIATIREYFINLONEBTAVPKGTB9JZADLDFRA9EXMRGE\
         BNZRMGYSFMMW9AJJDFFCAMWISDZQSFXROHIOTJBWZXUAUFP9UWRYSXJXFKIIMMWKOQIWMHDWHHTNY9YVF\
         YFIAHFKNBYUKTOATGRWPKSUPABYPJPYDXW99VQMKCIJD9UYWKOEGLBSEUMICQEUUDFPPJHGOLFINSYCOM\
         TVCRYIMOZHDCVKUHGCDILTMARDLCETUYSLRMNVZEOZSTPGHGTKITJAGIVJSLJUOERYEBRXAVKLUCGMEDK\
         RBB9XIAOUEUAWEVWXEXDHHVNZPFOXSIFVOVIDCRSUMUVMHNKYAUDXOQCIJXSEZLLHDSHTKZYDYLOTVUJE\
         WKXVCAFV9QDTEKUAZY9ZJLUBXJ9HGPLFHOPSMUVFHQAGASFIFCVKWBATCSHBUIBMIBA9W9OFBGHKAJADO\
         OOYGQLKHWOYIAEVNITWOB9OALUPORAUORKFYUDITB9JBQIPXZOFLBCRXZW9CNLORRI9LOJDEGSEOXGOXA\
         PGOVBAAXUOYDCAYZBAMCG9NTHF99LPXDTCBVQ9AAWCVGPAGSTOETFPDNEVNCHHYATVXVAN9U99GNQGZDD\
         STWIYVRNDNFEAFITYORHCMCTVFGWHYX9MNDSQ9LSWHVUCWGQD9CUVBKI9ZIPSDKWBJQENHJQ9WBFWHMBJ\
         BPXKZOIOBNXRDETYMBFXUHPTLYLHKNGWVTXUIYYYSXVUDRLXCIRUTRJEQXNIBEUEJGLTLKAPCWRQWWRJS\
         TWZU9NCBSQSYKRSXETQHDCVGXUYQYTYL9TAEWGSUMTVH9GHZPRUFAAFELPJTXCBALJFTFDSBCVQMRGTNL\
         WUDPKJZY9ZFCBNBNRGUMJCTYHJLWCOSHSUOKLCQGQSXUHYAPHKFQTVIOOCFBCI9IMULPZHGRYYASVCOIG\
         QOHRU9IA9R9DGVHIN9DUNAVSTVFQGLLSKWQYWHWXJPTPYQKSWZOSJAOOMVF9ACVGWBWGFKCRCS9FQLGAO\
         TBIOIIQD9TFMKBUZEQVAHR9KNFV9TOPIFIMDOLZF9XUGGSVVJWIORFHXQIDBUPUDVVO9GHGKSPVFNXXIT\
         AQQLRB9C9O9ZLY9PAMQGHUTBPHPORVFYJTMJLQEVJMRZAKMSWLSOBEUPTTGMPJQI9OIDOMZUCQNXNZGBU\
         ADIMJ9GRUCEGRYBUPRNVZERJOQPEJHQFAJOZRPYWHNCTVZOQWTTWQMAJI9ASLIHBMIYOXRDAOVXBLVPCN\
         C9ADMKEJC9VVRNKNRSUBYEFPGEYEJHVCS9YCAHJVQMKUAANG9DBPWJM9CMEOFZMPWJFEYIPQSMIFX9BYF\
         LT9OEDHUSEUWWNHCB9BXN9KQBQEIGEYGPZIVUMMNKALQQTPFCDKDMXXINLFWNTTFFOTULJAUM9OYCKHME\
         NDRYXYNBJPF9QUSRCVFRJVBRGPQXCQQU99KHJJFDC9GYKZEAEYOURMURPXSTJUGZTMQMQDFWGHNDWPPC9\
         ZM9E9ZKKVVNHXAAUTPBTFXSMDTNFCDHBLJYYSPZTAXTRXZQBBLSVZLDRTYMYDXBIKEGDZYVZYPIDOMKBU\
         OAHKARSHEUJKKGZNYDNMCPDCOKXDVSYFBWJLDI9RXAEURLLRRXLWKDXQVWZEPOHZTV9UXHPILZTMQCURH\
         NM9OIWVLHIWMVDRZOONALDYGHOKTWKGDPXEETFHUCRRWEBREJFTDAFYMYZLKXSUDDTKWRSVGEXMUFYFYB\
         IEEUEK9IKKTOYFBYFHBIFW9QNVZIIYIFDFZM9MEENJGT9PEITNZHGYGUU9S9KPVFKVEVTZUKEYRWBEA9U\
         QXSKTSKHMZUVOSLTPCTWTKMIOZMDYDYKKGYCRUMI9GYUNJNON9KJHXZJFAAEDVC9JPIKVCFWCRPZUQZDE\
         RNICXTA9SGCWPAFZMREVTE9LPRKLNBSCLBNAQ9MEOOUVBMBAXBISHT9CRQEUTMOMBVNKKA9VYMRJHTYNZ\
         POBSPPJALPY9TTRLRWEGIPXBOWLAAPHGRBGXYLMCAEPDVHGGESGGEOVTCANFDQLRXCBUIJQJAFSWOZGOL\
         MMRUNVWXLXSGUSEMPWILMQJWQTVOD9IPNBMLQXMRVPHTOTPPMBGBVXISSNIJMKVWBHTOEZYCOFII9JDCP\
         AKVLIJZPJNQCANFEUXGYVQHWOARMJEGWUEFPAWSZEDSJKPGZCYAJPHEJRPVFFP9OTEUPKPDRBAF9CIRMP\
         WUJKPXXVKBAAVSAWYERCBZRIRTJKGYJTJNCEHOJ9Y9JXZCTQKZDXPUCGYHPRCMGZGONFULQUUEFLRNFDT\
         OKEXQYB9SNQYELNMHFLYWYXNKAIFRRTSVVBIVNY9POOCLKN9FEZPJSFRU9CEASFTJRSOYGJOWXBDNITTR\
         GBVYV9IGUOZKIHBQYEKSHUQUZELPRQQWJZWODIKDHMLHYRZR9LAAIIQAZYTBJJPDYDMLWIIIETVNTVCDK\
         AMZVTNLKJXKMCBOEG9TEVCGJVVDTQCYKNJCJISTDFXZRNARVY9RSE9WNYHVZUOQS9AG9ZVUMYN9ZHJQFC\
         LOLUODSLBOEVJBEDLXYIAOZLDWMZIFNGYUJAKLLENDIHFGHSFKHMZRQHQLPJJUOFEZTPJCK9UYUKUOETZ\
         YK9ZWLUFHFPOHSVEPOITUAZQEJEMAYQWQAMGUXTFIQC9EALIKELHBHOHLURLUNGUIMKFZIQRQWOMZBLVM\
         QWEARLLG9OENLIIGHLWCXXRQGFDNQJLBPLFSBZILMBMMLTLYMEBKEAZCEEJWVDGSSTWPKTAVYX9QVYFVF\
         WMPOEDAICIHNWUNVVFGDNOAHXSJWIEWUWW9YHSDMA9ESJTZUPQDIEKSRFYBBRVBJDYVBWCYBFMGZNNCHQ\
         TAMBDVUBTOWNO9FZFCPQQLYPDMCPPLIZXSDHOJMSYSHCXYRPNH9SRUVAVUVANOOLRPXNCYGMZVEECIPKN\
         GAUWZOFRFYKKUAHPQRMYHUXZYCUUMGWMDNEEDPOFKWMMGRJZNRLRCPUKHDVYGEHRKBESTJOMBKUMWPFPR\
         ZCEZAYMOYR9TQRKKCGTEK9AALYGYFTDSS9DIWMUDPWCGOBWYFKK9OYRXUJWUFFZWOCTKOWXKJVBAARHFS\
         VTSIF9XNLHKGFLYLUD9GAIZFXZVLL9OVMOCVQAGW9LFSNVUQJC9HBIVPHVN9ZQYRPSALTSYWSQRGGEHHY\
         YCZRFM9UGPEZLVZVETQDGDSHRKPKLEVHGKKWNBBXEFOIQUEJLQURMFXCUWHAUMCBJXBOKODNUWADLEOBR\
         TZHKDATHDDUUOLZHOCDYSJHBFFSOLLMSZPNVYGEQZHSYUFVQXRJGNETWGKMREEENKLJEVHLOJVHOS99HJ\
         VJZFUSBBLFNDTYGZUVM9SMZI9XIEQUYGOWQYIHQNEMZO9YCZCUMTKBQEE9ZIKJQNCUWJFLPRO9P9YZJIO\
         OVOFSNADJZACQKGKEADHMLAEALIEGEMKMSLZWMNGBOMBFPBJXSYOJPPAXFZOIGP9MIXMMZU9LRTMQLTUN\
         SKSTROTK9RBDFCTUYUIJAQNPKSIAEKMNFGMPXE9WCKVPSXNJL9PZMALMRPCVSYDDN9HXCJDIJPBAMRGMO\
         AYEOVOVBHLZCKDA9VQYZNVGLHHWGTTMAXZQPRNTTHJRSZLBRMEPXLMAFZWQEHGVTRQCWZEKRQASZNPUTM\
         PDASIHZSYCH9JOOHVYVVAVWRCHMZGCBEUZW9RLXHPYICLCKWX9WUUFK9EFROJWGWIZBB9JIILGZUZQIVW\
         ZOCEYHZMCYJRQHJRMKLEMYTELCCLNLNPCMPRYPNZOZZXUMBMVPVRMOOQIFMNIRTLVWYTFWZOFE9VQEHWM\
         UKATDXSLA9TINIAQNTATNUTOQZEZBMZNIBMJWWSNLKYUAGBBGRD9IGRL9GR9MRTXNLPOGMXBVCBX9GHBO\
         HDMKZXBIYAYFDPELQEKFZXQKJLKXXHUSDCWKJVFCA9TFZWKRGHILNEDDZSEEGUZNOUZL9TXCHECLWPXIH\
         FX9GA9FZQGLNIURDBTY9PIWADVFIRXVBUJOWBH9ZYLQEGMNERXURSEBQDOT9IIDFUMTSSNVBXBXHFYSVV\
         CLYQVUSOOVAEXLL9LKPYHMPJNTRAQIXXYLKLPIFKSNJ9ZNFDNEONEKCPJFXBGQPHOYAZ9DNMKIVQMPAQH\
         LOFEYRPALB9ZUFHRHOCLHVIYPRRREUZWCIJXZNVFZUIXMNWNGITPRUKYQIHNMATIYTZGJBSKTEVTGHHEE\
         AFTQBXFDRUYWSMERBS9XYJWPJSLFVWUFWMNQQGQHFZDLPNCSGRQAAAWVLFOYINJZLPOGJBLHVHFDFXOSA\
         RNFONWCQOBKGBSFXF9KOQZTJEO9SVJEZ9999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999\
         999999999999999999999999999999999999999999999999999999999999999999999999999999999",
    );
    let root = String::from(
        "XJRTLCDZIEERKF9LNNAPLZXAINCBTWKXWSNPXQBXPNZHMQGTZQUZVBJCBOXVGTREXTMGFJUKRTHGHDVML",
    );
    let side_key = String::from(
        "DFWLYDBLUUABRDDCAJHZVMYNKGVNLRRGY9VRBM9WNBCAZYQYTSFSYPUNOSVHSVXIYLBAEBXJRJKQZIRHJ",
    );

    let mut payload_ctrits = ctrits_from_trits(ctrits_to_trits(&ctrits_from_trytes(payload)));
    let root_ctrits = ctrits_from_trits(ctrits_to_trits(&ctrits_from_trytes(root)));
    let side_key_ctrits = ctrits_from_trits(ctrits_to_trits(&ctrits_from_trytes(side_key)));

    let raw: Box<ParseResult> = unsafe {
        Box::from_raw(iota_mam_parse(
            &mut payload_ctrits,
            &root_ctrits,
            &side_key_ctrits,
        ))
    };

    assert!(raw.error == iota_mam::MamError::InvalidHash);
}
